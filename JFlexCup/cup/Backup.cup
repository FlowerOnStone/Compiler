package upl;

import java_cup.runtime.*;
// import Example.Parser.Expr;
import java.io.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
  // Connect this parser to a scanner!
  
  public boolean syntaxErrors;
  public Scanner s;
  
  
  public void syntax_error(Symbol current_token){ 
      report_error(
          "Syntax error at line " + (current_token.left+1) + ", column "
          + current_token.right, null
      );
  }
:}

/* Terminals (tokens returned by the scanner). */
terminal BEGIN, END;  // begin, end statement
terminal LEFT_BRACKET, RIGHT_BRACKET, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, SEMICOLON, COMMA;
terminal DO, WHILE, IF, THEN, ELSE;

terminal String INT_T, BOOL_T;
terminal String CONST_INT;
terminal String CONST_BOOL;
terminal String IDENTIFIER;

terminal ADD, MUL, ASSIGN;

terminal PRINT;

terminal UNTERMINATED_CMT, ILLEGAL;

terminal GREATER, GREATER_EQUAL, EQUAL;


/* Non terminals */
non terminal SProgram S;                           // start symbol
non terminal StmtList stmtList;
non terminal Stmt stmt;
non terminal TExpr Expr;
non terminal TMExpr M_Expr;
non terminal TIfTail ifTail;
non terminal TAssignment Assignment;
non terminal TType Type;         // Declaration

non terminal TIdentifier Identifier_t;
non terminal TRop Rop;           // 3 ROP


precedence right ADD;            // id +(id + (id))
precedence right MUL;            // id * (id * (id))
precedence nonassoc ASSIGN;      // id=id=id => ERROR !
precedence nonassoc GREATER;
precedence nonassoc GREATER_EQUAL;
precedence nonassoc EQUAL;


/* The grammar rules */
S           ::=   BEGIN stmtList:sl END 
                  {: RESULT = new SProgram(sl); :}
                  ;

stmtList    ::=   stmt:s SEMICOLON stmtList:sl
                  {: RESULT = new StmtList(s, sl); :}
                | {: RESULT = new StmtList(); :}
                ;

stmt        ::=   IF Expr:e THEN LEFT_BRACKET stmtList:sl RIGHT_BRACKET ifTail:tail
                  {: RESULT = new TIf(e, sl, tail); :}
                | DO LEFT_BRACKET stmtList:sl RIGHT_BRACKET WHILE LEFT_PARENTHESIS Expr:c RIGHT_PARENTHESIS
                  {: RESULT = new TDoWhile(sl, c); :}
                | Identifier_t:id ASSIGN Expr:e                   // Assignment
                  {: RESULT = new TAssignment(id, e); :}
                | Type:t Identifier_t:id ASSIGN Expr:val         // Declaration
                  {: RESULT = new TDeclaration(t, id, val); :}
                | Type:t Identifier_t:id                         // Declaration
                  {: RESULT = new TDeclaration(t, id); :}
                | PRINT LEFT_PARENTHESIS Expr:e RIGHT_PARENTHESIS
                  {: RESULT = new SPrint(e); :}
                  ;


ifTail      ::=   ELSE LEFT_BRACKET stmtList:sl RIGHT_BRACKET
                  {: RESULT = new TIfTail(sl);  :}
                | {: RESULT = new TIfTail();    :} ;

Type        ::=   INT_T
                  {: RESULT = new TType("int"); :}
                | BOOL_T
                  {: RESULT = new TType("bool"); :} 
                  ;

Expr        ::=   M_Expr:e      {: RESULT = e; :} 
                | BoolExpr:e    {: RESULT = e; :} ;

M_Expr      ::=   CONST_INT:num
                  {: RESULT = new TInt_T(num); :}
                | Identifier_t:id
                  {: RESULT = id; :}
                | LEFT_PARENTHESIS Expr:e RIGHT_PARENTHESIS
                  {: RESULT = e; :}
                | Expr:l ADD Expr:r 
                  {: RESULT = new TMExpr("+", l, r); :}
                | Expr:l MUL Expr:r
                  {: RESULT = new TMExpr("*", l, r); :}
                ;


BoolExpr ::= M_Expr:l Rop:op M_Expr:r
              {: RESULT = new TBoolExpr(op, l, r); :} 
            | CONST_BOOL
              {: RESULT = new TBoolExpr(true); :}  // TODO: true to something else
              ;
              

Rop         ::=   GREATER 
                {: RESULT = new TRop("GR"); :} 
               |  GREATER_EQUAL 
                {: RESULT = new TRop("GE"); :} 
               |  EQUAL
                {: RESULT = new TRop("EQ"); :} 
                ;

Identifier_t ::= IDENTIFIER:id
                {: RESULT = new TIdentifier(id); :} 
                ;

