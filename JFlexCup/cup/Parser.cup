package upl;

import java_cup.runtime.*;
// import Example.Parser.Expr;
import java.io.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
  // Connect this parser to a scanner!
  
  public boolean syntaxErrors;
  
  
  public void syntax_error(Symbol current_token){ 
      report_error(
          "Syntax error at line " + (current_token.left+1) + ", column "
          + current_token.right, null
      );
  }
:}

/* Terminals (tokens returned by the scanner). */
terminal BEGIN, END;  // begin, end statement
terminal LEFT_BRACKET, RIGHT_BRACKET, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, SEMICOLON, COMMA;
terminal DO, WHILE, IF, THEN, ELSE;

terminal INT_T, BOOL_T;
terminal CONST_INT, CONST_BOOL;
terminal IDENTIFIER;

terminal ADD, MUL, ASSIGN;
terminal G_THAN, G_EQ, EQEQ;           // 3 ROP

terminal PRINT;

terminal Integer NUMBER; // TODO: Delete

/* Non terminals */
non terminal stmtList, stmt;
non terminal Expr, M_Expr, Tmp, METail;
non terminal ifTail;
non terminal Assignment, Declaration, Rop;
non terminal Type, L, L1, L2;         // Declaration
non terminal Y, Term, Factor, T2;


precedence right ADD;            // id +(id + (id))
precedence right MUL;            // id * (id * (id))
precedence nonassoc ASSIGN;      // id=id=id => ERROR !
precedence nonassoc G_THAN, G_EQ, EQEQ;


/* The grammar rules */

stmtList    ::=   stmt SEMI stmtList 
                | ;

stmt        ::=   IF Expr THEN LEFT_BRACKET stmtList RIGHT_BRACKET ifTail
                | DO LEFT_BRACKET stmtList RIGHT_BRACKET WHILE LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS
                | Assignment
                | Declaration
                | PRINT LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS;

ifTail      ::=   ELSE LEFT_BRACKET stmtList RIGHT_BRACKET
                | ;

Declaration ::=   Type L;
Type        ::=   INT_T | BOOL_T;
L           ::=   L1 L2;
L1          ::=   IDENTIFIER | Assignment;
L2          ::=   COMMA L 
                | ;

Assignment  ::= IDENTIFIER ASSIGN Expr;

Expr        ::= M_Expr Tmp;
Tmp         ::= Rop M_Expr | ;
M_Expr      ::= Term METail;
METail      ::= ADD M_Expr | ;
Y           ::= IDENTIFIER | CONST_INT;

Term := Factor T2;
Factor := Y | LEFT_PARENTHESIS M_Expr RIGHT_PARENTHESIS;
T2      := MUL Term | ;
